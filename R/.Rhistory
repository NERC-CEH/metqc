list.files(dir_glw, pattern = ".tif")
#Read in GLW files----
#r_da is dasymetric method (DA) of assigning chickens to land - different weighting per cell depending on
#environmental variables and random forest models
r_da <- raster(paste0(dir_glw,"5_Ch_2010_Da.tif"))
#r_aw is areal-weighted (AW), assigning pixels per census area and considering all pixels equally suitable
r_aw <- raster(paste0(dir_glw,"6_Ch_2010_Aw.tif"))
#Read in UK raster----
r_dauth <- raster("N:\\Useful_datasets\\dauth.asc")
#take out the Isle of Man
r_dauth[r_dauth == 4] <- NA
#turn into UK reference raster
r <- setValues(r_dauth, 1:ncell(r_dauth))
#Need to set to osgb from https://spatialreference.org/ref/epsg/27700/proj4/
osgb<-"+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +datum=OSGB36 +units=m +no_defs "
#set crs
crs(r) <- osgb
#Working with Jize's netcdf----
#Directories---
dir_netcdf <- "P:\\07484_DUKEMS_WP5_AGRINH3\\Data\\jize_poultry_0.5_degrees\\"
nc_srce<-"Broiler data 0.5 degree.nc"
nc<-nc_open(paste0(dir_netcdf,nc_srce))
names(nc$var) # check variable names
nc$var$Animal_heads$units # check units
#Reading in the netcdf
r_broiler_0.5 <- raster(paste0(dir_netcdf,"Broiler data 0.5 degree.nc"), varname = "Animal_heads")
area<-area(r_broiler_0.5)
r_broiler_km2<-overlay(x=r_broiler_0.5,y=area,fun=function(x,y){(x*y)})
cellStats(r_broiler_0.5,sum)
cellStats(r_broiler_km2,sum)
#transforming projectiong to Irish Grid
r_broiler_km2 <- projectRaster(r_broiler_km2, r)
r_broiler_km2 <- mask(r_broiler_km2, r_dauth)
test <- projectRaster(r_broiler_0.5, r)
plot(test)
cellStats(r_broiler_km2,"sum")
cellStats(test, "sum")
plot(r_chicken_km2)
#Creating a broiler/layer split----
prj_dir<-"//nerclactdb.adceh.ceh.ac.uk/Projects/PROJECTS1/SPEED_Metal/Atmos_inputs/Historic_data/Industry_activity_data_and_research/Agriculture/"
#Read in split file----
broiler_split <- read_excel(paste0(prj_dir,"animal_numbers/Broiler_prop.xlsx"),sheet='Prop_broiler',range="A1:D28")
broiler_split <- broiler_split %>%
filter(Year == 2010) %>%
dplyr::select(Broilers, `Layers(n23+n26)`, Other)
colnames(broiler_split) <- c("broiler","layer", "other")
#moving to long format so I can join it with the efs data.table
broiler_split <- pivot_longer(broiler_split,cols = everything(),names_to = "OUTPUT_TYPE",values_to = "SPLIT")
broiler_split$OUTPUT_TYPE <- gsub("other","layer",broiler_split$OUTPUT_TYPE)
broiler_split <- broiler_split %>%
group_by(OUTPUT_TYPE) %>%
summarise(SPLIT = sum(SPLIT))
sum(broiler_split$SPLIT)
r_layer_km2 <- r_chicken_km2 * broiler_split$SPLIT[broiler_split$OUTPUT_TYPE == "broiler"]
r_broiler_km2 <- r_chicken_km2 * broiler_split$SPLIT[broiler_split$OUTPUT_TYPE == "layer"]
#Directories---
dir_netcdf <- "P:\\07484_DUKEMS_WP5_AGRINH3\\Data\\jize_poultry_0.5_degrees\\"
nc_srce<-"Broiler data 0.5 degree.nc"
nc<-nc_open(paste0(dir_netcdf,nc_srce))
names(nc$var) # check variable names
nc$var$Animal_heads$units # check units
#Reading in the netcdf
r_broiler_0.5 <- raster(paste0(dir_netcdf,"Broiler data 0.5 degree.nc"), varname = "Animal_heads")
#area<-area(r_broiler_0.5)
#r_broiler_km2<-overlay(x=r_broiler_0.5,y=area,fun=function(x,y){(x*y)})
#transforming projectiong to Irish Grid
r_chicken_km2 <- projectRaster(r_chicken_0.5, r)
r_chicken_km2 <- mask(r_chicken_km2, r_dauth)
plot(r_chicken_km2)
#Creating a broiler/layer split----
prj_dir<-"//nerclactdb.adceh.ceh.ac.uk/Projects/PROJECTS1/SPEED_Metal/Atmos_inputs/Historic_data/Industry_activity_data_and_research/Agriculture/"
#Read in split file----
broiler_split <- read_excel(paste0(prj_dir,"animal_numbers/Broiler_prop.xlsx"),sheet='Prop_broiler',range="A1:D28")
broiler_split <- broiler_split %>%
filter(Year == 2010) %>%
dplyr::select(Broilers, `Layers(n23+n26)`, Other)
colnames(broiler_split) <- c("broiler","layer", "other")
#moving to long format so I can join it with the efs data.table
broiler_split <- pivot_longer(broiler_split,cols = everything(),names_to = "OUTPUT_TYPE",values_to = "SPLIT")
broiler_split$OUTPUT_TYPE <- gsub("other","layer",broiler_split$OUTPUT_TYPE)
broiler_split <- broiler_split %>%
group_by(OUTPUT_TYPE) %>%
summarise(SPLIT = sum(SPLIT))
sum(broiler_split$SPLIT)
r_layer_km2 <- r_chicken_km2 * broiler_split$SPLIT[broiler_split$OUTPUT_TYPE == "broiler"]
r_broiler_km2 <- r_chicken_km2 * broiler_split$SPLIT[broiler_split$OUTPUT_TYPE == "layer"]
list.files(dir_netcdf)
#Working with Jize's netcdf----
#Directories---
dir_netcdf <- "P:\\07484_DUKEMS_WP5_AGRINH3\\Data\\jize_poultry_0.5_degrees\\"
nc_srce<-"Broiler data 0.5 degree.nc"
nc<-nc_open(paste0(dir_netcdf,nc_srce))
names(nc$var) # check variable names
nc$var$Animal_heads$units # check units
#Reading in the netcdf
r_broiler_0.5 <- raster(paste0(dir_netcdf,"Broiler data 0.5 degree.nc"), varname = "Animal_heads")
#area<-area(r_broiler_0.5)
#r_broiler_km2<-overlay(x=r_broiler_0.5,y=area,fun=function(x,y){(x*y)})
#transforming projectiong to Irish Grid
r_broiler_km2 <- projectRaster(r_broiler_0.5, r)
r_broiler_km2 <- mask(r_broiler_km2, r_dauth)
r_layer_0.5 <- raster(paste0(dir_netcdf,"Layer data 0.5 degree.nc"), varname = "Animal_heads")
#area<-area(r_layer_0.5)
#r_layer_km2<-overlay(x=r_layer_0.5,y=area,fun=function(x,y){(x*y)})
#transforming projectiong to Irish Grid
r_layer_km2 <- projectRaster(r_layer_0.5, r)
r_layer_km2 <- mask(r_layer_km2, r_dauth)
# #Creating a broiler/layer split----
5
#Writing out files----
#writing out raster files
out_dir <- "P:\\07484_DUKEMS_WP5_AGRINH3\\Data\\output_files\\"
#writing out netcdf files
writeRaster(r_broiler_km2, paste0(out_dir,"broiler_dummy_data_uk_glw_1km.nc"),
format = "CDF",varname = "broiler_heads",
varunit= "heads")
writeRaster(r_layer_km2, paste0(out_dir,"layer_dummy_data_uk_glw_1km.nc"),
format = "CDF",varname = "layer_heads",
varunit= "heads")
check <- raster(paste0(out_dir,"broiler_dummy_data_uk_glw_1km.nc"))
plot(check)
check <- raster(paste0(out_dir,"layer_dummy_data_uk_glw_1km.nc"))
plot(check)
cellStats(check, sum)
check <- raster(paste0(out_dir,"broiler_dummy_data_uk_glw_1km.nc"))
plot(check)
cellStats(check, sum)
library(raster)
?writeRaster
shiny::runApp('met_db')
runApp('met_db')
runApp('met_db')
install.packages('shinydashboard')
runApp('met_db/R')
runApp('met_db/R')
library(shinydashboard)
runApp('met_db/R')
runApp('met_db/R')
?hidden
runApp('met_db/R')
runApp('met_db/R')
runApp('met_db/R')
install.packages()
install.packages("reactlog")
library(reactlog)
runApp('met_db/R')
reactlogShow()
runApp('met_db/R')
reactlogShow()
runApp('met_db/R')
runApp('met_db/R')
runApp('met_db/R')
source('./busy-indicator.R')
source('./database-connection.R')
source('./ui.R')
source('./server.R')
runApp('met_db/R')
runApp('met_db/R')
source('./busy-indicator.R')
source('./database-connection.R')
# Set timezone to GMT to stop R/Oracle changing dates based on daylight saving time
Sys.setenv(TZ = "GMT")
Sys.setenv(ORA_SDTZ = "GMT")
# Set database connection
dbuid <- "BU_FIELD_SITES"
dbpwd <- "0ig2mtYUL9"
drv <- dbDriver("Oracle")
con <- dbConnect(drv, dbname = "budbase.nerc-bush.ac.uk/BUA",
username = dbuid,
password = dbpwd)
table_name <- "MET_30MIN"
dbNames <- dbListFields(con, table_name)
runApp('met_db/R')
runApp('met_db/R')
runApp('met_db/R')
runApp('met_db/R')
?column
?box
runApp('met_db/R')
runApp('met_db/R')
runApp('met_db/R')
runApp('met_db/R')
source('./busy-indicator.R', local = TRUE)
source('./busy-indicator.R', local = TRUE)
#' busyIndicator
#'
#' A busy indicator
#'
#' @param text The text to show
#' @param img An anitmated gif
#' @param wait The amount of time to wait before showing the busy indicator. The
#'   default is 1000 which is 1 second.
#'
#' @export
busyIndicator <- function(text = "Calculation in progress..",img = "../busyIndicator/ajaxloaderq.gif", wait=1000) {
tagList(
singleton(tags$head(
tags$link(rel="stylesheet", type="text/css",href="../busyIndicator/busyIndicator.css")
))
,div(class="shinysky-busy-indicator",p(text),img(src=img))
,tags$script(sprintf(
"	setInterval(function(){
if ($('html').hasClass('shiny-busy')) {
setTimeout(function() {
if ($('html').hasClass('shiny-busy')) {
$('div.shinysky-busy-indicator').show()
}
}, %d)
} else {
$('div.shinysky-busy-indicator').hide()
}
},100)
",wait)
)
)
}
runApp('met_db/R')
?shinyApp
runApp('met_db/R')
runApp('met_db/R')
?box
runApp('met_db/R')
?read_csv
library(readr)
runApp('met_db/R')
runApp('met_db/R')
runApp('met_db/R')
runApp('met_db/R')
runApp('met_db/R')
runApp('met_db/R')
runApp('met_db/R')
?checkboxGroupInput
runApp('met_db/R')
install.packages(shinyWidgets)
install.packages("shinyWidgets")
install.packages("shinyWidgets")
shiny::runApp('met_db/R')
library(shinydashboard)
library(shinywidgets)
library(shiny)
library(shinydashboard)
library(shinywidgets)
library(shinyjs)
library(shinywidgets)
library(shinyWidgets)
library(shinyWidgets)
install.packages("shinyWidgets")
install.packages("shinyWidgets")
install.packages("bslib")
install.packages("htmltools")
install.packages("bslib")
library(devtools)
install_version("htmltools", version = "0.5.2")
install_version("htmltools")
install.packages("htmltools")
install.packages("fastmap")
install.packages("fastmap")
install.packages("htmltools")
install.packages("bslib")
install.packages("shinyWidgets")
shiny::runApp('met_db/R')
library(shinydashboard)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(shinyjs)
library(shinythemes)
library(lubridate)
runApp('met_db/R')
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(shinyjs)
library(shinythemes)
library(lubridate)
library(plyr)
library(dplyr)
library(ggplot2)
library(readr)
library(ggiraph)
library(ROracle)
library(readxl)
library(DT)
library(data.table)
library(mgcv)
library(shinyalert)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(shinyjs)
library(shinythemes)
library(lubridate)
library(plyr)
library(dplyr)
library(ggplot2)
library(readr)
library(ggiraph)
library(ROracle)
library(readxl)
library(DT)
library(data.table)
library(mgcv)
library(shinyalert)
runApp('met_db/R')
runApp('met_db/R')
dbNames
runApp('met_db/R')
input$select_variables
input$variable_check
runApp()
runApp('met_db/R')
input$variable_check
# make an SQL query to select all fields between start and end dates
qry <- paste0("SELECT DATECT, TIMESTAMP, DATECT_NUM, ",
paste0(input$variable_check, sep = ",")," FROM ", table_name,
" WHERE DATECT > TO_DATE('", job_df()$datech[1], "', 'yyyy/mm/dd hh24:mi')
AND DATECT < TO_DATE('", job_df()$datech[6], "', 'yyyy/mm/dd hh24:mi')")
qry
# make an SQL query to select all fields between start and end dates
qry <- paste0("SELECT DATECT, TIMESTAMP, DATECT_NUM, ",
paste0(input$variable_check, sep = ",")," FROM ", table_name,
" WHERE DATECT > TO_DATE('", job_df()$datech[1], "', 'yyyy/mm/dd hh24:mi')
AND DATECT < TO_DATE('", job_df()$datech[6], "', 'yyyy/mm/dd hh24:mi')")
# make an SQL query to select all fields between start and end dates
qry <- paste0("SELECT DATECT, TIMESTAMP, DATECT_NUM, ",
#paste0(input$variable_check, sep = ",")
input$variable_check
," FROM ", table_name,
" WHERE DATECT > TO_DATE('", job_df()$datech[1], "', 'yyyy/mm/dd hh24:mi')
AND DATECT < TO_DATE('", job_df()$datech[6], "', 'yyyy/mm/dd hh24:mi')")
df_qry <<- dbGetQuery(con, qry)
input$variable_check
table_name
job_df
job_df()$datech[1]
runApp('met_db/R')
# make an SQL query to select all fields between start and end dates
qry <- paste0("SELECT DATECT, TIMESTAMP, DATECT_NUM, ",
paste0(input$variable_check, sep = ",")
," FROM ", table_name,
" WHERE DATECT > TO_DATE('", job_df()$datech[1], "', 'yyyy/mm/dd hh24:mi')
AND DATECT < TO_DATE('", job_df()$datech[6], "', 'yyyy/mm/dd hh24:mi')")
qry
df_qry <<- dbGetQuery(con, qry)
# make an SQL query to select all fields between start and end dates
qry <- paste0("SELECT DATECT, TIMESTAMP, DATECT_NUM, ",
input$variable_check
," FROM ", table_name,
" WHERE DATECT > TO_DATE('", job_df()$datech[1], "', 'yyyy/mm/dd hh24:mi')
AND DATECT < TO_DATE('", job_df()$datech[6], "', 'yyyy/mm/dd hh24:mi')")
qry
# make an SQL query to select all fields between start and end dates
qry <- paste0("SELECT DATECT, TIMESTAMP, DATECT_NUM, ",
input$variable_check[1]
," FROM ", table_name,
" WHERE DATECT > TO_DATE('", job_df()$datech[1], "', 'yyyy/mm/dd hh24:mi')
AND DATECT < TO_DATE('", job_df()$datech[6], "', 'yyyy/mm/dd hh24:mi')")
qry
# make an SQL query to select all fields between start and end dates
qry <- paste0("SELECT DATECT, TIMESTAMP, DATECT_NUM, ",
input$variable_check[1:n]
," FROM ", table_name,
" WHERE DATECT > TO_DATE('", job_df()$datech[1], "', 'yyyy/mm/dd hh24:mi')
AND DATECT < TO_DATE('", job_df()$datech[6], "', 'yyyy/mm/dd hh24:mi')")
# make an SQL query to select all fields between start and end dates
qry <- paste0("SELECT DATECT, TIMESTAMP, DATECT_NUM, ",
input$variable_check[1:3]
," FROM ", table_name,
" WHERE DATECT > TO_DATE('", job_df()$datech[1], "', 'yyyy/mm/dd hh24:mi')
AND DATECT < TO_DATE('", job_df()$datech[6], "', 'yyyy/mm/dd hh24:mi')")
qry
# make an SQL query to select all fields between start and end dates
qry_variables <- paste0(input$variable_check, sep =",")
qry_variables
# make an SQL query to select all fields between start and end dates
qry_variables <- paste(input$variable_check, sep =",")
qry_variables
# make an SQL query to select all fields between start and end dates
qry_variables <- paste(input$variable_check, collapse =",")
qry_variables
qry <- paste0("SELECT DATECT, TIMESTAMP, DATECT_NUM, ",qry_variables," FROM ", table_name,
" WHERE DATECT > TO_DATE('", job_df()$datech[1], "', 'yyyy/mm/dd hh24:mi')
AND DATECT < TO_DATE('", job_df()$datech[6], "', 'yyyy/mm/dd hh24:mi')")
qry
# make an SQL query to select all fields between start and end dates
qry_variables <- paste(input$variable_check, collapse =", ")
qry_variables
qry <- paste0("SELECT DATECT, TIMESTAMP, DATECT_NUM, ",qry_variables," FROM ", table_name,
" WHERE DATECT > TO_DATE('", job_df()$datech[1], "', 'yyyy/mm/dd hh24:mi')
AND DATECT < TO_DATE('", job_df()$datech[6], "', 'yyyy/mm/dd hh24:mi')")
df_qry <<- dbGetQuery(con, qry)
# make an SQL query to select all fields between start and end dates
qry_variables <- paste(input$variable_check, collapse =", ")
qry <- paste0("SELECT DATECT, TIMESTAMP, ",qry_variables," FROM ", table_name,
" WHERE DATECT > TO_DATE('", job_df()$datech[1], "', 'yyyy/mm/dd hh24:mi')
AND DATECT < TO_DATE('", job_df()$datech[6], "', 'yyyy/mm/dd hh24:mi')")
df_qry <<- dbGetQuery(con, qry)
df_qry
shiny::runApp('met_db/R')
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(shinyjs)
library(shinythemes)
library(lubridate)
library(plyr)
library(dplyr)
library(ggplot2)
library(readr)
library(ggiraph)
library(ROracle)
library(readxl)
library(DT)
library(data.table)
library(mgcv)
library(shinyalert)
shinyApp(ui = ui, server = server, onStart = )
runApp('met_db/R')
runApp()
runApp('met_db/R')
runApp('met_db/R')
all_tabs_to_render
tabBox
tabPanel
all_tabs_to_render
library(shiny)
runApp(list(
ui=fluidPage(
fluidRow(
actionLink("newTab", "Append tab"),
actionLink("removeTab", "Remove current tab")
),
tabsetPanel(id="myTabs", type="pills")
),
server=function(input, output, session){
tabIndex <- reactiveVal(0)
observeEvent(input$newTab, {
tabIndex(tabIndex() + 1)
appendTab("myTabs", tabPanel(tabIndex(), tags$p(paste("I'm tab", tabIndex()))), select=TRUE)
})
observeEvent(input$removeTab, {
removeTab("myTabs", target=input$myTabs)
})
}
))
?reactiveVal
?appendTab
runApp('met_db/R')
input$variable_check
runApp('met_db/R')
library(shiny)
runApp(list(
ui=fluidPage(
fluidRow(
actionLink("newTab", "Append tab"),
actionLink("removeTab", "Remove current tab")
),
tabsetPanel(id="myTabs", type="pills")
),
server=function(input, output, session){
tabIndex <- reactiveVal(0)
observeEvent(input$newTab, {
tabIndex(tabIndex() + 1)
appendTab("myTabs", tabPanel(tabIndex(), tags$p(paste("I'm tab", tabIndex()))), select=TRUE)
})
observeEvent(input$removeTab, {
removeTab("myTabs", target=input$myTabs)
})
}
))
runApp('met_db/R')
plotting_function("G")
df_qry
plotting_function <- function(input_variable){
p1 <- ggplot(df_qry, aes(DATECT, y = df_qry[, input_variable])) +
geom_point_interactive(aes(data_id = checked, tooltip = checked,
colour = df_qry[, input_variable]), size = 3) +
#geom_line(aes(y = df_qry$pred), colour = "red") +
xlab("Date") +ylab(paste("Your variable:", input_variable)) +
ggtitle(paste(input_variable, "time series")) +
theme(plot.title = element_text(hjust = 0.5), legend.title = element_blank())
p1
}
plotting_function("G")
runApp('met_db/R')
runApp('met_db/R')
runApp('met_db/R')
i
plotting_function(i)
plotting_function("TS")
plotting_function("TS")
plotting_function <- function(input_variable){
p1 <- ggplot(df_qry, aes(DATECT, y = df_qry[, input_variable])) +
geom_point_interactive(aes(data_id = checked, tooltip = checked,
colour = df_qry[, input_variable]), size = 3) +
#geom_line(aes(y = df_qry$pred), colour = "red") +
xlab("Date") +ylab(paste("Your variable:", input_variable)) +
ggtitle(paste(input_variable, "time series")) +
theme(plot.title = element_text(hjust = 0.5), legend.title = element_blank())
p1
}
plotting_function("TS")
plotting_function(i)
appendTab("plotTabs", tabPanel(i, plotting_function(i)))
runApp('met_db/R')
runApp('met_db/R')
runApp('met_db/R')
?appendTab
runApp('met_db/R')
?renderGirafe
runApp('met_db/R')
runApp('met_db/R')
